{"version":3,"sources":["src/paddle.js","src/input.js","src/collisionDetection.js","src/ball.js","src/brick.js","src/levels.js","src/game.js","src/index.js"],"names":["Paddle","game","gameWidth","width","height","maxSpeed","speed","position","x","y","gameHeight","ctx","fillStyle","fillRect","deltaTime","InputHandler","paddle","document","addEventListener","event","keyCode","moveLeft","moveRight","togglePause","start","stop","detectCollision","ball","gameObject","bottomOfBall","size","topOfBall","topOfObject","leftSideOfObject","rightSideOfObject","bottomOfObject","Ball","image","getElementById","reset","drawImage","lives","Brick","markedForDeletion","buildLevel","level","bricks","forEach","row","rowIndex","brick","brickIndex","push","level1","level2","GAMESTATE","PAUSED","RUNNING","MENU","GAMEOVER","NEWLEVEL","Game","gamestate","gameObjects","levels","currentLevel","length","object","update","filter","draw","rect","fill","font","textAlign","fillText","canvas","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timeStamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.4e736436.js","sourceRoot":"..","sourcesContent":["export default class Paddle {\r\n  constructor(game) {\r\n    this.gameWidth = game.gameWidth;\r\n    this.width = 150;\r\n    this.height = 20;\r\n\r\n    this.maxSpeed = 7;\r\n    this.speed = 0;\r\n\r\n    this.position = {\r\n      x: game.gameWidth / 2 - this.width / 2,\r\n      y: game.gameHeight - this.height - 10\r\n    };\r\n  }\r\n\r\n  moveLeft() {\r\n    this.speed = -this.maxSpeed;\r\n  }\r\n\r\n  moveRight() {\r\n    this.speed = this.maxSpeed;\r\n  }\r\n\r\n  stop() {\r\n    this.speed = 0;\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.fillStyle = \"green\";\r\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\r\n  }\r\n\r\n  update(deltaTime) {\r\n    this.position.x += this.speed;\r\n\r\n    if (this.position.x < 0) {\r\n      this.position.x = 0;\r\n    }\r\n\r\n    if (this.position.x + this.width > this.gameWidth) {\r\n      this.position.x = this.gameWidth - this.width;\r\n    }\r\n  }\r\n}\r\n","export default class InputHandler {\r\n  constructor(paddle, game) {\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          paddle.moveLeft();\r\n          break;\r\n\r\n        case 39:\r\n          paddle.moveRight();\r\n          break;\r\n\r\n        case 27:\r\n          game.togglePause();\r\n          break;\r\n\r\n        case 32:\r\n          game.start();\r\n          break;\r\n      }\r\n    });\r\n\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          if (paddle.speed < 0) {\r\n            paddle.stop();\r\n            break;\r\n          }\r\n\r\n        case 39:\r\n          if (paddle.speed > 0) {\r\n            paddle.stop();\r\n            break;\r\n          }\r\n      }\r\n    });\r\n  }\r\n}\r\n","export function detectCollision(ball, gameObject) {\r\n  let bottomOfBall = ball.position.y + ball.size;\r\n  let topOfBall = ball.position.y;\r\n\r\n  let topOfObject = gameObject.position.y;\r\n  let leftSideOfObject = gameObject.position.x;\r\n  let rightSideOfObject = gameObject.position.x + gameObject.width;\r\n  let bottomOfObject = gameObject.position.y + gameObject.height;\r\n  if (\r\n    bottomOfBall >= topOfObject &&\r\n    topOfBall <= bottomOfObject &&\r\n    ball.position.x >= leftSideOfObject &&\r\n    ball.position.x + ball.size <= rightSideOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import { detectCollision } from \"./collisionDetection\";\r\n\r\nexport default class Ball {\r\n  constructor(game) {\r\n    this.image = document.getElementById(\"img_ball\");\r\n    this.size = 20;\r\n    this.gameHeight = game.gameHeight;\r\n    this.gameWidth = game.gameWidth;\r\n    this.game = game;\r\n    this.reset();\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.size,\r\n      this.size\r\n    );\r\n  }\r\n\r\n  reset() {\r\n    this.speed = { x: 4, y: -3 };\r\n    this.position = { x: 10, y: 400 };\r\n  }\r\n\r\n  update(deltaTime) {\r\n    this.position.x += this.speed.x;\r\n    this.position.y += this.speed.y;\r\n\r\n    // collisions with left and right wall\r\n    if (this.position.x + this.size > this.gameWidth || this.position.x < 0) {\r\n      this.speed.x = -this.speed.x;\r\n    }\r\n\r\n    // collision with top\r\n    if (this.position.y < 0) {\r\n      this.speed.y = -this.speed.y;\r\n    }\r\n\r\n    // bottom wall collision\r\n    if (this.position.y + this.size > this.gameHeight) {\r\n      this.game.lives--;\r\n      this.reset();\r\n    }\r\n\r\n    // collision with paddle\r\n    if (detectCollision(this, this.game.paddle)) {\r\n      this.speed.y = -this.speed.y;\r\n      this.position.y = this.game.paddle.position.y - this.size;\r\n    }\r\n  }\r\n}\r\n","import { detectCollision } from \"./collisionDetection\";\r\n\r\nexport default class Brick {\r\n  constructor(game, position) {\r\n    this.image = document.getElementById(\"img_brick\");\r\n    this.position = position;\r\n    this.width = 80;\r\n    this.height = 24;\r\n    this.game = game;\r\n\r\n    this.markedForDeletion = false;\r\n  }\r\n\r\n  update() {\r\n    if (detectCollision(this.game.ball, this)) {\r\n      this.game.ball.speed.y = -this.game.ball.speed.y;\r\n\r\n      this.markedForDeletion = true;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n}\r\n","import Brick from \"/src/brick/\";\r\n\r\nexport function buildLevel(game, level) {\r\n  let bricks = [];\r\n\r\n  level.forEach((row, rowIndex) => {\r\n    row.forEach((brick, brickIndex) => {\r\n      if (brick === 1) {\r\n        let position = {\r\n          x: 80 * brickIndex,\r\n          y: 75 + 24 * rowIndex\r\n        };\r\n        bricks.push(new Brick(game, position));\r\n      }\r\n    });\r\n  });\r\n  return bricks;\r\n}\r\n\r\nexport const level1 = [\r\n  // [0, 1, 1, 1, 0, 1, 0, 0, 0, 1],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\r\n];\r\n\r\nexport const level2 = [\r\n  [0, 1, 1, 1, 0, 1, 0, 0, 0, 1],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [0, 0, 0, 1, 0, 1, 0, 1, 0, 0]\r\n];\r\n","import Paddle from \"/src/paddle/\";\r\nimport InputHandler from \"/src/input/\";\r\nimport Ball from \"/src/ball/\";\r\nimport Brick from \"/src/brick/\";\r\nimport { buildLevel, level1, level2 } from \"/src/levels/\";\r\n\r\nconst GAMESTATE = {\r\n  PAUSED: 0,\r\n  RUNNING: 1,\r\n  MENU: 2,\r\n  GAMEOVER: 3,\r\n  NEWLEVEL: 4\r\n};\r\n\r\nexport default class Game {\r\n  constructor(gameWidth, gameHeight) {\r\n    this.gameHeight = gameHeight;\r\n    this.gameWidth = gameWidth;\r\n    this.gamestate = GAMESTATE.MENU;\r\n    this.gameObjects = [];\r\n    this.bricks = [];\r\n    this.levels = [level1, level2];\r\n    this.currentLevel = 0;\r\n    this.paddle = new Paddle(this);\r\n    this.ball = new Ball(this);\r\n    this.lives = 3;\r\n    new InputHandler(this.paddle, this);\r\n  }\r\n\r\n  start() {\r\n    if (\r\n      this.gamestate !== GAMESTATE.MENU &&\r\n      this.gamestate !== GAMESTATE.NEWLEVEL\r\n    )\r\n      return;\r\n\r\n    this.bricks = buildLevel(this, this.levels[this.currentLevel]);\r\n    this.ball.reset();\r\n\r\n    this.gameObjects = [this.ball, this.paddle];\r\n\r\n    this.gamestate = GAMESTATE.RUNNING;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.lives === 0) {\r\n      this.gamestate = GAMESTATE.GAMEOVER;\r\n    }\r\n\r\n    if (\r\n      this.gamestate === GAMESTATE.PAUSED ||\r\n      this.gamestate === GAMESTATE.MENU ||\r\n      this.gamestate === GAMESTATE.GAMEOVER\r\n    )\r\n      return;\r\n\r\n    if (this.bricks.length === 0) {\r\n      this.currentLevel++;\r\n      this.gamestate = GAMESTATE.NEWLEVEL;\r\n      this.start();\r\n    }\r\n\r\n    [...this.gameObjects, ...this.bricks].forEach((object) =>\r\n      object.update(deltaTime)\r\n    );\r\n\r\n    this.bricks = this.bricks.filter((brick) => !brick.markedForDeletion);\r\n  }\r\n\r\n  draw(ctx) {\r\n    [...this.gameObjects, ...this.bricks].forEach((object) => object.draw(ctx));\r\n\r\n    if (this.gamestate === GAMESTATE.PAUSED) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(0,0,0,0.5)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"Paused\", this.gameWidth / 2, this.gameHeight / 2);\r\n    }\r\n\r\n    if (this.gamestate === GAMESTATE.MENU) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(255,255,255,1)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"black\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\r\n        \"Press SPACEBAR to start the game\",\r\n        this.gameWidth / 2,\r\n        this.gameHeight / 2\r\n      );\r\n    }\r\n\r\n    if (this.gamestate === GAMESTATE.GAMEOVER) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"GAME OVER\", this.gameWidth / 2, this.gameHeight / 2);\r\n    }\r\n  }\r\n\r\n  togglePause() {\r\n    if (this.gamestate === GAMESTATE.PAUSED) {\r\n      this.gamestate = GAMESTATE.RUNNING;\r\n    } else {\r\n      this.gamestate = GAMESTATE.PAUSED;\r\n    }\r\n  }\r\n}\r\n","import \"./styles.css\";\nimport Paddle from \"/src/paddle/\";\nimport InputHandler from \"/src/input/\";\nimport Ball from \"/src/ball/\";\nimport Game from \"/src/game/\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 800;\nconst GAME_HEIGHT = 600;\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT);\n\nlet lastTime = 0;\n\n// images\n\nfunction gameLoop(timeStamp) {\n  let deltaTime = timeStamp - lastTime;\n  lastTime = timeStamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  game.update(deltaTime);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"]}